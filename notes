Let's define the following:

0624 Study Group
    -Components
        -functional components
        -can be class components
        -reusable bits of code
        -appends to the DOM
        -building blocks 

    -Props
        -"properties"
        -objects
        -live in components
        -passed into functions from our components
            -think of them as parameters stored in components

    -JSX
        -unique to React
        -allows us to write (what looks like) HTML in our JavaScript
        -Babel


    -Project Ideas
        -Medium Type Blog
            -Different types of blogs/categories/topics
            -Different styles for bloggers to choose (font style updates)
            -Different layout
                - Title
                - Content

        -Something like Discord
            -Comms app 
            -Custom layout for each user
                -List of communities
                    -Text field (input)
                    -Community specific
                        -Calls (for individual groups)
                -Settings
                -Friends
        
        -Zara's Website
            -Search Bar/field
            -General layout
                -Scrambled right now
                -Streamline images
                -Best sellers vs unordered listings
                -Clothing information
                    -Include sourcing data

0629 Study Group    
    -Event Handling
        -accepts a callback function
            - can be anonymous or named
            - has to be in the components 
                - can't write outside of the component? we're going to test this! (First thing on 0705!!!)
        -onClick
            - 'click'
        -onChange
            -using a form's input fields
            -dropdowns 
        -onSubmit
            -usually attached to a button
            -updates something based on form submission


    -State
        -helps us dynamically update the component based on some input/action from the user
        -lives in our component
        -is essentially the 'state of being' 
        -Jonathan Villanueva says it's "Props++"
        -can be updated
            -must use setState function to update state in a component
            -can it be mutated?


0708 Study Group
    -Controlled Components
        -Any component that accesses information through props
        -What makes a form component a controlled form?
            -They have props!
                -Our input fields, buttons, checkboxes, etc. all have props passed down to them, and can access information this way
                -Can also use these props (i.e. callback functions) to update parent components, and state


    -Task(s)
        -We're going to replicate a vanilla JS SPA as a React SPA
        -What components will we need?
            -What should our hierarchy be?
                -Added in separate file

0713 Study Group
    -Today's Tasks!
        -Update our current components (x)
            -Artist names should display and be clickable (x)
            -Finish building our form (x)
            
0715 Study Group
    -Finish writing our callback function in App to display albums accordingly (x)
    -Grab our data from an API instead of the data file (x)
    -Make our content field dynamically display our form or discography based on a button click (x)

0720 Study Group    
    -Update our form so we can gather information and post it to our API (x)
        -we should also update the app's state to account for the addition (x)

0722 Study Group
    -Update our code to use React Router
        -URL should display form component when button is clicked (x)
            -ex: https://localhost:3000/add-artist
    -Let's display all of the albums at once when we head to https://localhost:3000/albums (x)

*BEFORE 0727 STUDY GROUP*
    -Update our code to use React Router
        -URL should display albumList component and name of artist when clicked
            -ex: https://localhost:3000/albums/corinne-bailey-rae
            -hint: you can do this in the ArtistName component using React Router DOM